# -*- coding: utf-8 -*-
"""
Created on Tue Dec 25 12:27:24 2018

@author: luize
"""

from scipy.signal import butter, lfilter, freqz, welch
import numpy as np
import matplotlib.pyplot as plt

#Trecho para implementar um filtro de banda de passagem

def butter_bandpass(lowcut, highcut, fs, order=9):
    nyq = 0.5 * fs
    low = lowcut / nyq
    high = highcut / nyq
    b, a = butter(order, [low, high], btype='band', analog=False)
    return b, a

def butter_bandpass_filter(data, lowcut, highcut, fs, order=9):
    b, a = butter_bandpass(lowcut, highcut, fs, order=order)
    dados_filt = lfilter(b, a, data)
    return dados_filt

#Trecho para implementar um filtro de passagem alta

def butter_highpass(cutoff, fs, order=9):
    nyq = 0.5 * fs
    normal_cutoff = cutoff / nyq
    b, a = butter(order, normal_cutoff, btype='high', analog=False)
    return b, a

def butter_highpass_filter(data, cutoff, fs, order=9):
    b, a = butter_highpass(cutoff, fs, order=order)
    y = lfilter(b, a, data)
    return y

#Trecho para implementar um filtro de passagem de baixa

def butter_lowpass(cutoff, fs, order=9):
    nyq = 0.5 * fs
    normal_cutoff = cutoff / nyq
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    return b, a

def butter_lowpass_filter(data, cutoff, fs, order=9):
    b, a = butter_lowpass(cutoff, fs, order=order)
    y = lfilter(b, a, data)
    return y

def extrai_PSD(dados):
    #Define vetor com os dados que serao tratados
    
    csv = dados
    tempo = csv[:,0]
    #ac_x = csv[:,1]
    ac_y = csv[:,3]
    #ac_z = csv[:,3]
    #ac_T = csv[:,4]
    #dados_i = np.array([0,0.2687,-0.243,0.0966,0.0299,-0.068,0.0535,-0.0448,0.1775,0.4281,-0.3873,0.4063,-0.1251,0.2188,0.288,-0.1879,0.4546,-0.416,-0.1381,0.9205,-0.0559,-0.0321,0.3686,-0.2414,0.4927,0.081,-0.6287,0.6906,0.0108,-0.0917,-0.4802,-0.921,0.7165,0.1415,-0.1809,-0.1966,-1.0058,0.2547,0.1607,-0.0306,-0.0109,-0.1732,-0.5913,0.611,-0.0473,-0.3117,-0.4064,-0.5968,0.0559,0.3686,-0.1382,-0.3691,-0.5833,0.263,0.2695,-0.01,-0.2198,-0.5467,-0.1924,0.381,-0.5535,0.1718,0.5556,-0.22,0.3151,0.0018,0.0095,-0.5472,0.015,0.4255,-0.294,0.2371,-0.4179,-0.0971,-0.0373,0.2184,0.1059,-0.2407,-0.073,-0.0275,0.061,-0.0176,0.1471,-0.2117,0.1542,-0.1157,-0.0985,0.1333,0.1517,-0.1306,0.3236,-0.8732,0.4972,0.2641,-0.348,0.2762,-0.7988,-0.1642,0.311,-0.4038,0.0868,-0.2495,-0.3252,0.3175,0.1207,-0.2234,0.4964,-0.0994,-0.3002,0.6484,-0.2536,-0.4866,-0.4779,-0.4294,-0.3117,0.3602,-0.2468,0.0456,0.3246,-0.5674,0.4583,-0.0941,-0.3536,-0.5919,-0.1755,0.6224,-0.1765,0.4549,0.1671,0.1446,0.1129,-0.0042,-0.0825,-0.4073,-0.0438,0.2091,-0.0874,0.226,0.1564,-0.4032,0.0249,0.0512,-0.5958,0.2631,0.0044,-0.0556,0.508,-0.1638,-0.0558,-0.0273,-0.0991,0.4382,-0.0667,-0.2289,0.4331,-0.2727,0.6665,-0.8679,-0.1445,0.6533,-0.0505,0.3698,0.2618,-0.3096,0.3547,0.0217,0.2007,-0.4536,-0.5193,-0.0358,0.2364,-0.5067,-0.2616,0.0448,-0.3136,0.544,-0.1404,-0.3236,-0.6641,-0.2448,0.448,-0.0952,0.5956,-0.3011,-0.0309,0.3102,-0.247,0.5204,-0.4405,-0.4181,0.2822,0.0186,-0.0552,0.6331,0.1372,-0.363,0.0485,0.2848,-0.0949,-0.8158,-0.0599,0.6755,-0.2575,-0.0558,-0.2273,0.1024,-0.1945,0.4887,-0.1091,-0.3664,0.248,0.3042,0.1672,-0.0024,0.0506,-0.2913,-0.4678,0.4979,-0.0787,-0.1068,0.3064,0.6969,0.2842,0.0233,-0.1841,-0.4082,0.0988,0.2607,-0.1242,0.3348,-0.5139,0.4591,0.028,0.4603,-0.1206,-0.3665,0.2,0.1897,0.7792,-0.6362,-0.1524,0.2776,-0.2606,0.8553,-0.9446,0.2634,0.2673,-0.2875,0.3437,-0.5833,-0.4172,0.4479,0.3295,-0.5858,-0.2926,-0.2609,0.4413,-0.1141,-0.1401,0.0948,-0.5575,0.4607,-0.2833,-0.0654,0.5898,-0.5412,0.1667,0.0537,-0.1426,0.6321,-0.6254,-0.2088,0.5936,-0.1267,0.6883,0.1687,0.1298,-0.5804,0.6173,0.1123,-0.0308,-0.5421,0.5072,0.0281,-0.2726,-0.0518,0.2156,-0.3728,0.4469,0.2406,-0.1034,0.0975,-0.1278,0.2758,-0.1618,0.0063,0.0302,-0.1707,0.0873,0.0942,-0.2782,0.181,-0.4715,0.4034,0.0178,-0.2756,0.2743,-0.1781,0.5002,0.0189,-0.7713,-0.5066,0.402,-0.0362,0.3125,-0.6217,-0.1975,0.34,-0.4921,-0.104,-0.7197,0.1967,0.0862,-0.4396,-0.0445,0.4501,-0.7664,-0.0007,0.5506,-0.4728,-0.0248,-0.7984,-0.047,0.507,0.0185,0.1884,-0.1867,0.131,0.4598,-0.1385,0.3399,-0.4534,-0.3474,0.4721,-0.1309,-0.0754,-0.2706,0.0501,0.3885,0.5402,-0.2825,0.1987,0.019,-0.7315,0.66,-0.0292,-0.2531,0.1726,-0.0956,0.3031,-0.0177,-0.0075,-0.339,-0.876,0.2745,0.2308,-0.3355,0.4993,-0.3765,0.6556,-0.1295,-0.1122,-0.3744,-0.3451,0.348,0.1941,0.521,-0.2896,-0.2772,0.1147,0.4032,0.4526,0.0911,-0.2746,-0.1953,0.4163,-0.1124,0.3178,-0.3255,0.3055,-0.0106,0.4718,-0.181,-0.1591,-0.1782,-0.0442,0.1282,-0.1083,-0.0843,0.0969,0.0249,-0.1709,-0.194,0.0093,0.3551,-0.0685,0.2089,-0.8897,0.3659,0.3477,-0.1069,0.0009,-0.5693,0.1578,0.4436,-0.2646,0.0585,0.1211,-0.2374,0.3311,0.2797,-0.3945,0.8179,-0.6122,0.1865,0.1499,-0.0105,0.8999,0.074,0.5175,-0.1386,0.4778,0.0807,-0.392,-0.5299,0.5242,-0.122,-0.3411,-0.0103,-0.6768,0.5807,-0.0778,-0.2064,0.3438,-0.4259,-0.1317,0.1168,-0.1746,0.1438,-0.1692,-0.3436,0.1202,-0.1141,-0.1327,0.0612,-0.2785,-0.0702,0.059,-0.8006,0.0851,-0.2377,-0.2301,0.6253,-0.1114,0.0776,0.0508,0.0339,0.2368,-0.585,0.0994,0.1729,0.2343,0.3412,-0.0557,-0.2754,0.4868,0.2085,0.146,0.2679,-0.3704,0.4398,-0.1489,0.0663,0.9741,-0.0766,0.0068,-0.17,-0.2557,-0.0684,-0.1755,-0.3283,0.8113,-0.5351,-0.3541,-0.0235,-0.862,0.5891,0.3179,0.0571,-0.0286,-0.6066,0.6743,0.1472,-0.2469,-0.1217,-0.58,0.1587,0.3897,-0.4109,-0.2041,-0.6717,0.1462,0.16,-0.0361,-0.241,0.5909,0.1208,0.4591,0.0926,-0.3991,-0.1663,0.1371,0.11,0.1311,-0.043,-0.1238,-0.2671,-0.0471,0.2872,-0.0665,-0.1021,0.5307,0.054,0.4167,-0.4822,0.3361,0.0915,0.1005,0.1884,0.4581,-0.2424,0.1091,-0.4812,-0.0168,0.0646,-0.0022,-0.1147,0.2459,0.0159,-0.1273,0.1144,-0.3802,0.0191,-0.3654,0.0606,0.2469,-0.7425,0.0064,-0.0507,-0.1602,-0.0951,-0.2119,0.3206,-0.1505,0.447,-1.0558,0.4487,0.33,-0.134,0.0143,-0.2693,-0.8778,0.1626,0.4869,-0.2424,-0.8336,-0.2442,-0.4399,0.2679,0.0667,0.3753,-0.2488,-0.2965,0.277,0.231,-0.0315,-0.2726,-0.6665,0.3545,-0.1311,-0.0348,-0.6221,-0.3773,-0.36,0.2114,-0.1444,-0.2821,0.1983,0.1805,0.3899,0.5016,-0.2898,0.0309,0.2358,0.2469,-0.3553,0.3145,0.1011,0.4493,0.1063,0.2017,-0.011,-0.3644,-0.082,0.4647,0.6071,0.047,-0.0655,-0.2517,-0.2297,0.3177,0.0569,-0.1798,-0.1225,-0.1867,0.1362,-0.6829,0.0015,0.0728,-0.5028,0.2866,0.1596,-0.1991,0.0112,-0.2254,0.4342,-0.9994,0.3739,0.2412,-0.0102,-0.1081,-0.5085,0.2305,0.5065,-0.0846,-0.1036,-0.3892,-0.8802,-0.1167,0.3322,-0.0914,-0.1909,-0.7325,-0.4182,-0.0974,0.1057,0.641,0.1381,-0.6149,-0.1003,0.0908,0.1461,-0.1858,-0.8878,-0.2365,0.4158,-0.2439,-0.1926,0.2233,0.1815,0.2762,-0.0226,-0.1177,-0.7932,0.1396,0.4042,-0.2726,0.1798,-0.9217,0.1525,0.0756,0.0563,-0.0055,0.4888,-0.6401,0.1112,-0.0704,-0.3253,-0.2002,-0.2526,-0.1255,0.3023,-0.6271,-0.2768,0.3182,0.3531,0.3593,-0.0234,-0.4029,0.0824,-0.245,0.4886,-0.4793,0.1524,0.0992,-0.2474,-0.0915,0.7425,-0.4726,0.3283,-0.1312,-0.291,0.221,-0.5364,0.0758,0.5746,-0.296,-0.3594,-0.681,-0.2091,0.0274,-0.0825,-0.6573,0.5075,-0.564,0.3946,0.0568,-0.2581,0.3878,-0.0815,0.4936,0.4805,-0.2559,0.3517,-0.2797,-0.4755,0.4043,0.0095,0.5377,-0.1059,0.2995,0.2126,0.2146,-0.2462,-0.6824,-0.5262,0.5351,0.3905,-0.4888,-0.4035,0.0315,0.2605,0.1068,-0.0816,-0.2029,-0.4536,0.099,0.2777,-0.1811,0.13,-0.2526,-0.1781,0.2973,-0.6249,0.3965,0.1088,-0.5079,0.4962,-0.5387,0.1959,0.1452,-0.0106,0.2375,0.1558,-0.2288,-0.0182,-0.1689,-0.0825,0.2042,0.395,-0.7572,0.0253,-0.1587,0.2096,-0.0915,0.0758,0.2137,0.0531,0.3398,-0.0929,-0.1835,-0.0164,-0.3006,0.4454,-0.1355,-0.1926,0.4641,-0.0578,0.4798,-0.0033,-0.0776,0.5073,-0.1245,0.0621,0.4732,-0.4522,0.5254,-0.2473,0.0492,-0.5115,-0.5293,0.2716,-0.1019,-0.109,0.6656,-0.5204,-0.0227,0.2134,0.0527,0.7147,0.3357,-0.057,0.1768,-0.0101,-0.0908,-0.2741,-0.6319,-0.1149,0.2026,-0.003,0.444,0.3139,0.845,0.2048,0.0063,-0.1032,-0.4969,0.6001,0.1853,0.0033,0.4814,-0.6089,0.0276,0.13,-0.2092,-0.1011,0.0448,-0.3044,0.5893,-0.0567,-0.3547,-0.1749,-0.201,0.4799,0.3688,-1.0097,0.0578,0.3298,-0.1799,0.5491,-1.2261,0.4674,0.5567,-0.3141,0.427,0.3644,-0.3747,0.3256,-0.4107,0.1681,0.6985,0.0232,0.2996,0.0168,-0.2602,0.8442,-0.2301,0.2213,0.261,-0.234,-0.1924,0.0662,-0.5934,0.9671,-0.1266,0.0749,0.407,-0.1602,-0.01,0.446,0.4668,-0.4247,0.1254,-0.5013,0.5742,-0.1958,-0.3261,-0.1344,-0.3496,0.6611,0.1078,-0.2094,-0.8298,0.3968,0.3001,-0.2211,0.2169,-0.7509,-0.1309,0.225,-0.1121,-0.3933,0.6013,-0.3297,0.0364,0.1224,-0.4721,0.1666,-0.1516,-0.0392,0.2546,-0.1397,0.0303,-0.0466,0.0704,0.1847,0.8483,-0.1782,-0.0085,-0.4838,0.1549,0.3363,-0.2854,-0.0677,-0.3065,-0.0119,0.6354,-0.271,-0.199,-0.096,-0.0002,0.1337,-0.3966,-0.3579,0.5645,-0.1486,0.5806,-0.7437,0.4685,0.0896,-0.1614,0.269,0.1017,-0.6608,0.625,0.0337,-0.4414,0.2933,-0.5005,0.348,-0.1783,-0.0248,0.3006,-0.2329,0.247,0.1627,0.1672,0.5687,-0.7987,0.325,0.4745,-0.1905,-0.0533,0.5702,-0.0956,-0.1482,0.2269,-0.0642,-0.7349,-0.3467,0.0384,0.5133,-0.6886,-0.0227,0.1204,0.2343,0.3623,-0.4622,-0.0141,-0.2196,-0.0162,0.203,-0.1411,0.0268,-0.2767,0.2732,0.265,0.3075,0.1112,-0.4742,0.3338,0.1227,0.5548,0.1453,-0.5526,-0.0644,0.1866,0.093,0.1289,-0.4495,0.0097,-0.0045,0.0481,-0.021,-0.1786,0.01,-0.1907,0.0439,-0.3021,0.0137,0.0204,-0.2259,0.1306,-0.4567,-0.009,0.1792,-0.2129,0.2008,-0.7952,0.3146,0.3421,-0.2823,-0.1121,-0.7967,-0.6325,-0.0389,0.0996,0.0085,0.3841,-0.5029,0.4387,-0.0352,-0.2405,0.5606,-0.2956,-0.2163,0.3355,0.0623,-0.3219,-0.2469,-0.4733,0.4635,0.0994,-0.106,0.0809,-1.025,0.3885,0.3946,-0.1912,0.3446,0.0953,-0.7222,0.5713,-0.0435,-0.2411,-0.8088,0.9097,-0.022,0.1858,0.2814,-0.254,0.1473,-0.1567,0.3236,-0.6798,-0.1741,0.1507,-0.0792,0.7424,-0.2117,-0.1156,-0.3043,0.3768,0.2181,0.0362,0.1535,0.2054,-0.2464,0.2913,0.2022,0.0275,-0.3714,-0.1273,0.4222,0.5861,-0.0551,0.1644,-0.1515,-0.2037,0.2246,-0.454,0.0936,0.1386,-0.5589,-0.2158,0.5346,-0.3887,0.1276,-0.3742,-0.1414,0.5016,-0.3046,-0.0416,-0.0249,0.1831,-0.8796,-0.7198,0.2581,0.3338,-0.0848,-0.6262,-0.3597,0.6103,-0.2534,-0.0618,-0.718,-0.2839,0.4114,-0.1893,0.0476,0.836,0.2225,0.6993,-0.3822,0.4712,0.4827,-0.2752,-0.8053,-0.2234,0.2548,-0.0082,0.2859,-0.8137,0.5372,-0.023,-0.443,0.0074,-0.093,0.0429,0.4078,0.271,-0.0778,-0.0179,0.3733,0.0973,0.2073,-0.0506,-0.1459,-0.4994,-0.1117,0.3949,-0.0735,-0.4099,0.5007,0.0095,0.6636,0.0392,-0.0635,0.0677,0.072,0.7047,-0.4475,0.1531,-0.2057,0.3846,-0.0726,0.3289,-0.1611,0.109,-0.314,0.3145,0.147,-0.2594,0.2593,0.0387,-0.3626,-0.8535,-0.0011,-0.4098,-0.1224,-0.2823,-0.1811,0.0703,-0.3526,0.4478,-0.2007,0.6121,-1.0538,0.5725,0.1192,-0.0125,-0.0649,-0.6183,-0.5381,0.7834,-0.2074,0.039,-0.2829,-0.5139,0.5424,-0.2543,0.0471,-0.1483,-0.0595,-0.5158,-0.4288,0.4869,0.2714,-0.9471,-0.1403,0.4376,-0.2465,-0.088,-0.2689,-0.5454,0.3654,0.0371,-0.1369,0.0692,-0.6476,0.3757,0.0902,-0.0937,0.3367,-0.543,-0.0289,0.2383,-0.161,-0.0217,0.6017,-0.5106,0.6556,0.0045,-0.0164,-0.1549,0.4089,0.336,0.4043,0.0622,0.1436,0.4464,0.2636,0.4631,0.1425,-0.2898,-0.0029,-0.4423,0.3442,-0.2056,0.2177,0.0331,-0.5354,0.0746,-0.2595,0.3286,-0.0019,-0.1503,0.3585,-0.177,-0.5347,0.0349,0.2924,-0.3196,0.152,-0.5028,-0.1723,0.3366,-0.2279,-0.1601,-0.6157,-0.2156,0.6036,0.0648,-0.3268,-1.0517,-0.5359,0.5277,0.2899,-0.1979,-0.6577,-0.0401,0.5326,0.4189,-0.2746,-0.2613,-0.244,-0.6213,0.2039,0.0745,0.5526,-0.0865,-0.5333,0.1603,0.1646,0.4275,-0.8368,0.0963,0.1411,0.0953,-0.32,-0.0372,-0.5984,-0.5164,0.4709,-0.0409,0.0934,0.2817,1.004,-0.052,-0.0326,0.0993,-0.326,1.0763,0.1776,0.2489,0.263,-0.1172,-0.5258,-0.2096,0.0967,-0.3474,0.2148,-0.2232,-0.1251,0.1188,-0.9915,-0.029,0.1094,-0.6217,0.5712,0.0471,-0.07,0.0947,-0.1159,0.5721,-0.2241,-0.1686,0.0344,-0.2071,0.45,0.3585,-0.1486,0.4293,-0.1738,0.3997,0.1054,-0.2315,0.3467,0.2359,-0.235,-0.7045,-0.1917,-0.318,0.2269,-0.1678,-0.5229,0.3336,-0.188,0.1632,-0.1358,-0.1759,0.4959,-1.0315,0.0762,0.4772,-0.092,0.3339,-0.5054,0.737,-0.0458,-0.0767,0.5571,-0.7003,0.3706,0.3003,-0.1375,0.8593,-0.7093,-0.0943,0.3619,0.0384,-0.0424,0.2588,0.5012,-0.446,0.4099,0.7772,-0.5714,-0.1022,0.0411,0.0194,0.3279,0.0956,0.2194,0.3477,0.2627,0.0236,0.325,0.0495,-0.1659,0.4025,0.268,-0.0118,0.0265,-0.0457,0.1906,-0.1988,0.4705,-0.7366,-0.0545,0.5687,-0.1346,-0.0289,-0.1102,-0.1486,0.5348,-0.011,-0.6937,-0.0114,0.4397,-0.0034,0.5697,-0.193,-0.4265,0.1616,0.1753,0.4781,-0.6332,-0.1565,0.5505,-0.3919,0.3709,0.958,-0.2862,0.6405,-0.4143,0.1072,1.0625,-0.1652,0.1285,0.1519,-0.2688,-0.2964,-0.1306,-0.121,0.1154,-0.1884,0.4549,0.4516,-0.6483,-0.0716,0.633,-0.4236,-0.3791,-1.0924,0.0846,0.5762,-0.1986,0.6429,-0.0559,-0.4267,0.6965,-0.0763,0.2659,0.0311,-0.1057,0.0925,0.0828,0.0186,-0.0722,-0.3257,-0.0457,0.0452,-0.4011,-0.099,0.2879,0.2869,0.2861,-0.0127,0.057,0.1474,-0.4003,0.4434,0.3375,-0.5609,0.0325,-0.0825,0.4549,-0.1763,0.1325,-0.2714,-0.3689,0.1762,-0.3876,0.3397,-0.2941,-0.1646,0.4733,0.0759,-0.0602,-0.3013,-0.093,0.1171,0.4324,-0.5881,-0.1307,0.0867,-0.4437,0.2478,-0.5906,-0.0304,0.6665,-0.1686,-0.2827,-0.248,-0.0971,0.4591,0.0734,-0.266,-0.1382,0.0028,0.4465,-0.1422,-0.2875,0.6784,-0.467,0.508,-0.0595,-0.026,0.9776,0.1466,-0.6376,0.1994,0.4377,-0.0858,-0.5272,-0.0246,0.381,-0.4224,0.4387,0.0247,-0.5867,-0.0054,0.0017,-0.2298,-0.1428,-0.8637,0.0238,0.482,0.1108,-0.0586,-0.3855,-0.3659,0.4225,0.1349,-0.3687,-0.4104,-0.1208,0.1156,0.1248,-0.5413,-0.3677,0.6407,0.1468,0.5378,0.0164,0.0573,-0.2846,-0.2795,0.2345,0.1412,-0.0237,0.1937,0.0474,0.4861,0.7861,-0.0204,-0.1997,-0.5219,0.6133,-0.4195,0.4701,-0.2498,-0.0203,0.574,-0.072,-0.0692,-0.4797,-0.1017,0.1922,0.2182,-0.1402,0.13,-0.1596,-0.0662,0.0606,-0.7153,-0.0998,0.4376,-0.194,-0.3941,-0.1299,-0.2682,0.508,-0.2074,-0.2882,0.248,-0.1515,0.0419,0.3403,-0.1884,-0.3426,-0.368,-0.1189,0.4088,-0.2659,-0.2219,-0.374,0.0209,0.0659,-0.2403,0.0735,0.2408,-0.4213,-0.2872,0.3629,-0.065,-0.4536,-0.7939,0.1961,0.7543,-0.2121,0.2141,-0.4454,-0.6168,-0.0879,0.4783,0.676,-0.6674,0.0502,0.0737,0.0807,0.2384,-0.1392,-0.3708,0.081,0.1165,-0.0796,0.1646,0.0328,-0.4933,0.5584,-0.1663,0.0971,-0.6912,0.4255,0.1184,0.3354,-0.0375,-0.2355,0.381,-0.1742,0.2129,-0.2697,0.125,0.466,-0.3259,0.6444,-0.3144,0.1235,0.2329,-0.3123,0.2925,-0.3479,-0.0103,0.011,0.1134,0.4497,0.3199,-0.7149,0.3877,-0.3156,-0.3314,0.0899,-0.2301,0.1404,0.1994,-0.4267,-0.2175,-0.6489,-0.2224,0.5704,-0.052,-0.3548,-1.0102,0.3603,0.3542,0.043,-0.5181,0.028,-0.5668,0.2747,0.5772,-0.5058,-0.3011,-0.4962,0.4144,-0.0763,-0.2601,0.8968,-0.4618,-0.1149,0.3816,-0.1376,0.4459,0.2396,-0.5017,-0.0043,0.4111,0.1383,-0.4536,-0.0086,-0.4797,0.72,-0.1338,-0.3837,-0.2826,-0.6787,0.5214,-0.0768,0.3491,0.1978,-0.4503,0.6514,-0.174,0.0515,0.1876,-0.1668,-0.0688,-0.0423,-0.0226,0.1711,-0.5962,0.1882,0.1783,-0.6146,0.4402,-0.2393,0.2005,0.3024,0.3544,-0.3529,-0.1635,-0.2136,0.6273,0.4112,-0.0147,0.0664,-0.3352,0.0452,0.0499,0.3294,-0.1418,-0.1728,-0.1749,-0.0168,-0.0308,-0.1573,-0.4247,-0.1897,0.3385,-0.2183,-0.3157,0.3843,0.0083,-0.1826,-0.4707,0.0318,0.5303,0.0511,-0.1328,-0.9082,-0.7294,-0.0809,0.5688,-0.4498,0.0391,-0.2284,0.278,0.3297,-0.3519,0.8914,-0.0444,-0.668,0.3959,0.2324,0.4211,0.2724,-0.0701,-0.405,0.5868,-0.2691,-0.3419,-0.6732,0.4648,0.2461,-0.3083,-0.0111,-0.7801,0.1718,0.3383,-0.1854,0.0925,-0.9298,0.025,0.4855,-0.2033,0.0341,0.3566,-0.299,-0.2747,0.1751,0.5858,0.0949,-0.142,0.0323,0.1542,-0.703,0.3329,-0.3439,0.3258,0.1195,0.3872,-0.0667,-0.1335,-0.093,0.0548,-0.0385,-0.191,0.1125,-0.0553,0.0568,-0.4231,])
        
    
    #Define tamanhao da amostra
    D_Shape = ac_y.shape
    D = int(D_Shape[0])
    
    #Obtem o tempo total dos dados do arquivo .csv
    
    t = float(tempo[D-1])
    
    #Obtem a frequencia de aquisicao dos dados
    
    fs = D/t
    
    #Define o tamanho da amostra de forma que seja uma potencia de 2 para facilitar a FFT
    
    s_a = int(2**(np.floor(np.log(D)/np.log(2))+1))
    
    #Define frequência de Nyquist
    
    f_nyq = fs/2
    
    #Trecho para limpar momentos em que o veiculo ficou parado
    
    filtro = 2.5

    Posicao_Excluir = np.zeros((D,1))
    
    for i in range(0,D,1):
        if csv[i,2]<filtro and csv[i,2]>(-1*filtro):
            Posicao_Excluir[i] = i
            
    Posicoes = np.asarray(np.nonzero(Posicao_Excluir))
    
    ac_y = np.delete(ac_y, Posicoes[0],axis=0)
    
    D_Shape = ac_y.shape
    D = int(D_Shape[0])
    
    t = D/fs
    
    #Transforma as aceleração em g's
    
    ac_y = ac_y/9.807
    
    #Define numero de intervalos do dominio que se deseja fazer o PSD
    
    Numero_de_bins = 25
    
    #Define o step entre os intervalos
    
    #Numero correto
    #passo_frequencias = f_nyq/Numero_de_bins
    
    #Numero arredondado
    passo_frequencias = 2
    
    #Cria a matriz que contem os intervalos de corte
    
    #Matriz proxima das frequencias da avaliacao de Modal e Dinâmica
    
    #matriz_intervalos = np.array([[0,2,0],[2,6,0],[6,26,0],[26,50,0]])
    
    
    matriz_intervalos = np.zeros((Numero_de_bins,3))
    
    #Metodo correto
    #matriz_intervalos[Numero_de_bins-1,1] = f_nyq
    
    #Metodo aproximado
    matriz_intervalos[Numero_de_bins-1,1] = 50
    
    
    for i in range (1,Numero_de_bins,1):
        freq_for = i*passo_frequencias
        matriz_intervalos [i-1,1]=freq_for
        matriz_intervalos [i,0]=freq_for
        i+=1
    
    #Calcula o valor médio dos campos de frequencia
    
    for i in range (0,Numero_de_bins,1):
        matriz_intervalos [i,2] = (matriz_intervalos [i,0]+matriz_intervalos [i,1])/2
        i+=1
    
    #Filtra o sinal de ruidos de aquisicao
    
    freq_limpeza = 0.3
    ac_y_limpo = butter_highpass_filter(ac_y, freq_limpeza, fs, order=5)
    
    #Obtem as frequencias para o filtro de passagem de baixa e o filtro de passagem de alta
    
    low_corte = matriz_intervalos[0,1]
    high_corte = matriz_intervalos[Numero_de_bins-1,0]
    
    #Cria o vetor de sinais filtrados por frequencia
    
    ac_y_filt_t = np.zeros((Numero_de_bins,D))
    
    #Grafico do ganho do filtro de passagem de baixa
    """
    plt.figure(50)
    plt.clf()
    for order in [3, 6, 9]:
        b, a = butter_lowpass(low_corte, fs, order=order)
        #b, a = butter_bandpass(lowcut, highcut, fs, order=order)
        #b, a = butter_highpass(high_corte, fs, order=order)
        w, h = freqz(b, a, worN=s_a)
        plt.plot((fs * 0.5 / np.pi) * w, abs(h), label="order = %d" % order)
    plt.plot([0, 0.5 * fs], [np.sqrt(0.5), np.sqrt(0.5)],'--', label='sqrt(0.5)')
    plt.xlabel('Frequencia (Hz)')
    plt.ylabel('Ganho')
    plt.grid(True)
    plt.legend(loc='best')
    """
    #Aplica o filtro de passagem de baixa
    
    ac_y_filt_t[0] = butter_lowpass_filter(ac_y_limpo, low_corte, fs, order=5)
    
    #Grafico do ganho do filtro de passagem de alta
    """
    plt.figure(90)
    plt.clf()
    for order in [3, 6, 9]:
        #b, a = butter_lowpass(low_corte, fs, order=order)
        #b, a = butter_bandpass(lowcut, highcut, fs, order=order)
        b, a = butter_highpass(high_corte, fs, order=order)
        w, h = freqz(b, a, worN=s_a)
        plt.plot((fs * 0.5 / np.pi) * w, abs(h), label="order = %d" % order)
    plt.plot([0, 0.5 * fs], [np.sqrt(0.5), np.sqrt(0.5)],'--', label='sqrt(0.5)')
    plt.xlabel('Frequencia (Hz)')
    plt.ylabel('Ganho')
    plt.grid(True)
    plt.legend(loc='best')
    """
    #Aplica o filtro de passagem de alta
    
    ac_y_filt_t[Numero_de_bins-1] = butter_highpass_filter(ac_y_limpo, high_corte, fs, order=5)
    
    #Loop para aplicar filtro de banda de passagem diversas vezes no sinal
    for i in range (1,Numero_de_bins-1,1):
        low_loop_corte = matriz_intervalos[i,0]
        high_loop_corte = matriz_intervalos[i,1]
        ac_y_filt_t[i] = butter_bandpass_filter(ac_y_limpo, low_loop_corte, high_loop_corte, fs, order=5)
    
    
    #Aplicar Transformada de Fourier nos dados e cria o array com os dados da transformada
    
    ac_y_filt_f = np.zeros((Numero_de_bins,s_a))
    
    for i in range (0,Numero_de_bins,1):
        ac_y_filt_f[i] = 2*np.abs(np.fft.fft(ac_y_filt_t[i], s_a))
    
    #cria eixos para plotar sinal no dominio do tempo e no dominio da frequencia
    
    t_eixo = np.linspace(0,t,D)
    
    f_eixo = np.linspace(0,fs,s_a)
    
    #Plota sinal com ruido
    
    plt.figure(1,figsize=(16,6),dpi=72)
    plt.clf()
    plt.plot(t_eixo, ac_y, label='Sinal Ruidoso')
    plt.xlabel('Tempo[s]')
    plt.ylabel('Aceleração[g]')
    plt.grid(True)
    plt.axis('tight')
    plt.xlim(0,t)
    plt.legend(loc='best')
    plt.show()
    
    #Plota sinal com filtro de passagem de alta = 0,3 Hz
    
    plt.figure(2,figsize=(16,6),dpi=72)
    plt.clf()
    plt.plot(t_eixo, ac_y_limpo, label='Sinal Filtrado')
    plt.xlabel('Tempo[s]')
    plt.ylabel('Aceleracao[g]')
    plt.grid(True)
    plt.axis('tight')
    plt.xlim(0,t)
    plt.legend(loc='best')
    plt.show()
    
    #Plota sinais filtrados no dominio do tempo
    """
    for i in range (0,Numero_de_bins,1):
        fig_num=i+3
        plt.figure(fig_num,dpi=72)
        plt.clf()
        plt.plot(t_eixo, ac_y_filt_t[i], label='Sinal Filtrado %d - %d' %(matriz_intervalos[i,0], matriz_intervalos[i,1]))
        plt.xlabel('Tempo[s]')
        plt.ylabel('Aceleracao[g]')
        plt.grid(True)
        plt.axis('tight')
        plt.xlim(0,t)
        plt.legend(loc='best')
        plt.show()
    """ 
    #Plota sinais filtrados no dominio da frequencia
    """
    for i in range (0,Numero_de_bins,1):
        fig_num=i+6
        plt.figure(fig_num,dpi=72)
        plt.clf()
        plt.plot(f_eixo, np.abs(ac_y_filt_f[i]), label='Sinal Filtrado %d - %d' %(matriz_intervalos[i,0], matriz_intervalos[i,1]))
        plt.xlabel('Frequencia[s]')
        plt.ylabel('Aceleracao[g]')
        plt.grid(True)
        plt.axis('tight')
        plt.xlim(0,f_nyq)
        plt.legend(loc='best')
        plt.show()
    """
    #Define o Array com os valores filtrados ao quadrado
        
    ac_y_filt_t_2 = ac_y_filt_t**2
    
    #Define o Array com os valores filtrados ao quadrado na frequência
        
    ac_y_filt_f_2 = 2*(ac_y_filt_f/2)**2/s_a/D
    
    #Calcula as medias dos valores filtrados no tempo ao quadrado
    
    media_sinal_2 = np.zeros((Numero_de_bins,1))
    
    
    for i in range (0,Numero_de_bins,1):
        media_sinal_2[i] = np.average(ac_y_filt_t_2[i])
        #media_sinal_2[i] = np.average(ac_y_filt_f_2[i])
        
    
    #Plota sinais filtrados no dominio do tempo elevados ao quadrado
    """
    for i in range (0,Numero_de_bins,1):
        fig_num=i+3
        plt.figure(fig_num,dpi=72)
        plt.clf()
        plt.plot(t_eixo, ac_y_filt_t_2[i], label='Sinal Filtrado %d - %d' %(matriz_intervalos[i,0], matriz_intervalos[i,1]))
        plt.xlabel('Tempo[s]')
        plt.ylabel('Aceleracao[m/s^2]')
        plt.grid(True)
        plt.axis('tight')
        plt.xlim(0,t)
        plt.legend(loc='best')
        plt.show()
    """  
    #Calculo da PSD
        
    ac_y_PSD = np.zeros((Numero_de_bins,1))
    
    for i in range (0,Numero_de_bins,1):
        ac_y_PSD[i] = media_sinal_2[i] / matriz_intervalos[i,2]
    
    #Plotar funcao PSD
    """    
    plt.figure(100,dpi=72)
    plt.clf()
    plt.loglog(matriz_intervalos[:,2], ac_y_PSD, label='Sinal Filtrado %d - %d' %(matriz_intervalos[i,0], matriz_intervalos[i,1]))
    plt.xlabel('Frequencia[Hz]')
    plt.ylabel('PSD Aceleracao[(m/s^2)^2/Hz]')
    plt.grid(True)
    plt.axis('tight')
    plt.xlim(1,f_nyq)
    plt.legend(loc='best')
    plt.show()
    """
    PSD = np.zeros((Numero_de_bins,1))
    PSD = ac_y_PSD
    
    return PSD, matriz_intervalos[:,2]


PSD_Dados = np.zeros((25,4))

dados = np.genfromtxt ('Dados\Aceleracoes_de_Pista_obter_PSD\Pista_Ruim_Ida_2018-12-26_06.14.34.csv', delimiter=";",skip_header=1)

PSD_Dados[:,0:1], frequencias = extrai_PSD(dados)

dados = np.genfromtxt ('Dados\Aceleracoes_de_Pista_obter_PSD\Pista_Ruim_Volta_2018-12-26_17.39.33.csv', delimiter=";",skip_header=1)

PSD_Dados[:,1:2], frequencias = extrai_PSD(dados)

dados = np.genfromtxt ('Dados\Aceleracoes_de_Pista_obter_PSD\Pista_Boa_Ida_2018-12-27_08.00.38.csv', delimiter=";",skip_header=1)

PSD_Dados[:,2:3], frequencias = extrai_PSD(dados) 

dados = np.genfromtxt ('Dados\Aceleracoes_de_Pista_obter_PSD\Pista_Boa_Volta_2018-12-27_19.41.56.csv', delimiter=";",skip_header=1)

PSD_Dados[:,3:4], frequencias = extrai_PSD(dados)

estado = ['vias locais 1','vias locais 2','vias expressas 1','vias expressas 2']

plt.figure(100,figsize=(16,4),dpi=72)
plt.clf()

for i in range (0,4,1):
    plt.loglog(frequencias, PSD_Dados[:,i], label='PSD %s' %(estado[i]))

plt.xlabel('Frequencia[Hz]')
plt.ylabel('PSD Aceleracao[g^2/Hz]')
plt.grid(True)
plt.axis('tight')
plt.xlim(1,50)
plt.legend(loc='best')
plt.show()

